AWSTemplateFormatVersion: 2010-09-09

Description: This template creates the VPC, Security groups, EC2 instance and DynamoDB table.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "VPC CIDR"
        Parameters:
          - VpcCIDR
      - 
        Label:
          default: "Subnet CIDR"
        Parameters:
          - PublicSubnetCIDR

      - 
        Label:  
          default: "EC2 Parameters"
        Parameters:
          - InstanceType
          - EC2InstanceSecurityGroupName
          - KeyName
          - AmazonImageID




Parameters:
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for public subnet
    Type: String
    Default: 10.0.1.0/24

  InstanceType:
    Description: WebService EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large]

  EC2InstanceSecurityGroupName:
    Description: Security Group Name of Application
    Type: String
    Default: application

  AmazonImageID:
    Description: The ID of Amazon Machine Image(AMI)
    Type: String
    Default: "ami-053b0d53c279acc90"

  DynamoDBTableOne:
    Description: ADP test
    Type: String
    Default: "test-events"

  # SSHLocation:
  #   Description: The IP address range that can be used to SSH to the EC2 instances
  #   Type: String
  #   MinLength: '9'
  #   MaxLength: '18'
  #   Default: '0.0.0.0/0'
  #   AllowedPattern: '(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})'
  #   ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.


  KeyName:
    Description: Name of a EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: aws-01
    ConstraintDescription: Must be the name of an existing EC2 KeyPair

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: 
        - Key: Name
          Value: Test VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: Public Subnet 

  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: WebService application
      VpcId: !Ref VPC
          
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: EC2 Security Group


  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: 'webapp_launch_template'
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        SecurityGroupIds: 
          - !GetAtt EC2InstanceSecurityGroup.GroupId
        KeyName: !Ref KeyName
        ImageId: !Ref AmazonImageID
        IamInstanceProfile: 
          Arn: !GetAtt 
            - EC2InstanceProfile
            - Arn
        BlockDeviceMappings:
          - DeviceName: "/dev/sda1"
            Ebs:
              VolumeType: "gp3"
              VolumeSize: "20"
              DeleteOnTermination: "true"
              Encrypted: true
              KmsKeyId: !GetAtt EBSKey.Arn
        UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash
              set -e
              set -x

              # Update OS
              sudo apt-get update
              sudo apt-get upgrade -y
              sleep 30

              # Install Node.js
              sudo apt-get install curl
              curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
              sleep 15
              whereis node
              echo "npm version is $(npm --version)"

              # Install unzip
              sleep 15
              echo "Installing unzip"
              sudo apt-get install unzip

              # Unzip file
              sleep 15
              unzip /home/ubuntu/webservice.zip -d /home/ubuntu/webservice
              sudo rm -rf /home/ubuntu/webservice.zip

              # Move file and install dependencies
              sleep 15
              cd /home/ubuntu/webservice
              sudo npm install

              # Create the log file directory and ADPtest.log file and modify file permissions
              sleep 15
              sudo mkdir -p /home/ubuntu/webservice/logs
              sudo touch /home/ubuntu/webservice/logs/adp.log
              sudo chmod 777 /home/ubuntu/webservice/logs/adp.log

              # Install Unified CloudWatch Agent and modify the manually created cloudwatch-config.json file to the right place
              sleep 15
              cd /home/ubuntu
              wget https://s3.us-east-1.amazonaws.com/amazoncloudwatch-agent-us-east-1/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
              sudo dpkg -i -E amazon-cloudwatch-agent.deb
              sudo cp /home/ubuntu/webservice/cloudwatch-config.json /opt/cloudwatch-config.json
              sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
              -a fetch-config \
              -m ec2 \
              -c file:/opt/cloudwatch-config.json \
              -s

               # Start the application
              sleep 15
              cd /home/ubuntu/webservice
              sudo npm start


  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: '1'
      VPCZoneIdentifier: 
        - !Ref PublicSubnet1
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300

  EC2InstanceIAMRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies: 
        - PolicyName: WebAppDynamoDB
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles: 
       - !Ref EC2InstanceIAMRole

  EventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableOne
      AttributeDefinitions:
        - AttributeName: UserID
          AttributeType: S
        - AttributeName: TransactionHash
          AttributeType: S
      KeySchema:
        - AttributeName: UserID
          KeyType: HASH
        - AttributeName: TransactionHash
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  EBSKey:
    Type: AWS::KMS::Key
    Properties: 
      Description: This Customer managed key is used for encrypted EBS volume.
      EnableKeyRotation: true
      KeyPolicy: 
        Version: "2012-10-17"
        Id: "EBS-key"
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: 
              - "kms:*"
            Resource: '*'
          - Sid: "Allow access for Key Administrators"
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':user/mario_prod'
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:TagResource
              - kms:UntagResource
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: "*"
          - Sid: "Allow use of the key"
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
          - Sid: "Allow attachment of persistent resources"
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
            Action:
              - kms:CreateGrant
              - kms:ListGrants
              - kms:RevokeGrant
            Resource: '*'
            Condition: 
              Bool:
                kms:GrantIsForAWSResource: true

  EBSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/ebsKey
      TargetKeyId: !Ref EBSKey


Outputs:
  InstanceType:
    Description: Instance type used for EC2 instance
    Value: !Ref InstanceType
  AmazonImageID:
    Description: The ID of Amazon Machine Image(AMI)
    Value: !Ref AmazonImageID
  VpcCIDR:
    Description: CIDR block for VPC
    Value: !Ref VpcCIDR
  PublicSubnetCIDR:
    Description: CIDR block for public subnet
    Value: !Ref PublicSubnetCIDR

