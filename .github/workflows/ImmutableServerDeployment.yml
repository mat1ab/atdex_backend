name: Build AMI And Implement Immutable Server

env:
  ARTIFACT_NAME: webservice
  AWS_REGION: us-east-1
  LaunchTemplateName: asg_launch_config

on:
  push:
    branches: ["main"]
## Discard previous changes

jobs:
  nodejs_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    name: Install node application and run unit tests
    steps:
      - name: Step 1 - Checkout code from branch
        uses: actions/checkout@v2

      - name: Step 2 - Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Step 3 - Run Npm build install and unit tests
        run: |
          npm ci
          npm run build --if-present

  packer_init_validate_build:
    needs: nodejs_tests
    runs-on: ubuntu-latest
    name: Build AWS Custom AMI with Node Application artifacts
    steps:
      - name: Step 1 - Checkout code from branch
        uses: actions/checkout@v2

      - name: Step 2 - zip all the webservice files
        run: |
          zip -r webservice.zip ./
          pwd ./webservice

      - name: Step 3 - Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Step 4 - Validate Packer Template
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          arguments: -syntax-only
          target: ami.pkr.hcl

      - name: Step 5 - Build Artifacts and create Custom AMI from Packer Build
        uses: hashicorp/packer-github-actions@master
        with:
          command: build
          arguments: "-color=false -on-error=abort"
          target: ami.pkr.hcl
        env:
          PACKER_LOG: 1

      - name: Step 6 - Get Latest AMI ID
        run: |
          AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      - name: Step 6.1 - Configure AWS Demo Account Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEMO_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Step 7 - Create a new Launch Template with the AWS CLI
        run: |
          aws ec2 create-launch-template-version \
          --launch-template-name ${{ env.LaunchTemplateName }} \
          --version-description WebVersion2 \
          --source-version 1 \
          --launch-template-data "ImageId=${{ env.AMI_ID }}"

      - name: Step 8 - Update the Autoscaling Group to use the new Launch Template
        run: |
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name ${{ secrets.AutoScaling_Group_Name }} \
          --launch-template LaunchTemplateName=${{ env.LaunchTemplateName }},Version='$Latest'

      - name: Step 9 - Update the Autoscaling Group to use the new Launch Template
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name ${{ secrets.AutoScaling_Group_Name }}
